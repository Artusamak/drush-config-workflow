#!/bin/bash

#
# Usage:
#
#   ./scripts/quickstart [pantheon-site-name] [install-path]
#
# Purpose:
#
#   This script wil install all of the components needed to use
#   the `drush config-merge` command.  It will also create two
#   local Drupal 8 sites to experiment with.
#
#   If the name of a Pantheon site is provided as a commandline
#   argument, then only one local site will be created, and it
#   will be a clone of the remote Pantheon site.
#
# Notes:
#
#   This script is idempotent; you may run it multiple times with
#   no ill effects.  No action will be taken for components that
#   you have already installed before running this script.
#
#   Use --revert to erase the "working" site, and make it once again
#   a fresh copy of the dev site.
#

# Default argument values
PANTHEON_SITE=
PANTHEON_ENV='dev'
BASE_DIR=
PORT=8778

# Default option values
DEBUG=false
VERBOSE=false
TRACE=false
FORCE=false
MYSQL_USER=root
MYSQL_PASSWORD=

# Initial state variables
COPY_DATABASE=false
IMPORT_CONFIGURATION=false
MODIFIED_BASHRC=false
DEBUGMSG=false
VERBOSEMSG=false

MSG='echo # '
ERROR='echo '

# Exit if the previous function returns an error
function aborterr() {
  if [ $? != 0 ]
  then
    echo "$1" >&2
    exit 1
  fi
}


#
# Parse command line args
#
while [ $# -gt 0 ] ; do

  option="$1"
  shift

  case "$option" in
    -v|--verbose)
      VERBOSE=true
      VERBOSEMSG='echo # '
      ;;

    -d|--debug)
      DEBUG=true
      DEBUGMSG='echo ### '
      VERBOSE=true
      VERBOSEMSG='echo # '
      ;;

    --trace)
      TRACE=true
      ;;

    --force)
      FORCE=true
      ;;

    --user)
      MYSQL_USER=$1
      shift
      ;;

    --pw)
      MYSQL_PASSWORD=$1
      shift
      ;;

    --port)
      PORT=8778
      ;;

    --revert)
      COPY_DATABASE=true
      IMPORT_CONFIGURATION=true
      ;;

    --env)
      PANTHEON_ENV="$1"
      shift
      ;;

    -*)
      $ERROR "Unknown option $option" >&2
      exit 1
      ;;

    *)
      if [ -z "$PANTHEON_SITE" ]
      then
        PANTHEON_SITE="$option"
      elif [ -z "$BASE_DIR" ]
      then
        BASE_DIR="$option"
      else
        $ERROR "Too many arguments" >&2
        exit 1
      fi
      ;;
  esac
done

# Note whether we have needed apps
HAS_KDIFF3="$(which kdiff3)"
HAS_PHP="$(which php)"
HAS_COMPOSER="$(which composer)"
HAS_DRUSH="$(which drush)"
HAS_TERMINUS="$(which terminus)"

# Prohibit execution as root user
if [ "$(whoami)" == "root" ]
then
  $ERROR "Do not run $0 as root." >&2
  exit 1
fi

# Exit if php is not installed
if [ -z "$HAS_PHP" ]
then
  $ERROR "Install php before running this script." >&2
  exit 1
fi

# Create an initial bashrc if one does not already exist.
if [ ! -f "$HOME/.bashrc" ] ; then
  echo "# Initial .bashrc created by $0." > "$HOME/.bashrc"
fi

# Set a default BASE_DIR if one was not provided
if [ -z "$BASE_DIR" ]
then
  BASE_DIR="$HOME/local/drupal"
fi

# Turn on bash debugging if --trace is specified
if $TRACE
then
  set -x
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  O . S .  -  S P E C I F I C
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check the OS
OS="$(uname -s)"

# Do OS-specific operations.
case "$OS" in
  Darwin)
    if [ -z "$HAS_KDIFF3" ]
    then
      brew install Caskroom/cask/kdiff3
      aborterr "Could not install kdiff3 via 'brew install'."
    else
      $VERBOSEMSG "kdiff3 already installed."
    fi
    ;;

  Linux)
    if [ -z "$HAS_KDIFF3" ]
    then
      echo "$0 would like to install kdiff3"
      sudo apt-get install kdiff3
      aborterr "Could not install kdiff3 via 'apt-get install'."
    else
      $VERBOSEMSG "kdiff3 already installed."
    fi
    ;;

  *)
    $ERROR "$OS is not supported by $0" >&2
    exit 1
    ;;
esac


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   C O M P O S E R
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# https://getcomposer.org/doc/00-intro.md#system-requirements

if [ -z "$HAS_COMPOSER" ]
then
  # Download composer and place it in $HOME/bin
  curl -sS https://getcomposer.org/installer | php
  aborterr "Could not install composer."
  mkdir -p "$HOME/bin"
  mv composer.phar "$HOME/bin/composer"
  aborterr "Could not move composer to ~/bin"

  # If $HOME/bin is not already in the user's $PATH, then add it to ~/.bashrc
  if [ -z "$(which composer)" ] ; then
    sed -i '1i export PATH=$PATH:$HOME/bin' ~/.bashrc
    aborterr "Could not add PATH modification to .bashrc."
    export PATH="$PATH:$HOME/bin"
    MODIFIED_BASHRC=true
  fi
else
  $VERBOSEMSG "Composer already installed."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   P A T H   V A R I A B L E S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Make sure that $HOME/bin is on our PATH

if [ "$PATH" == "${PATH/$HOME/}" ] ; then
  export PATH="$HOME/bin:$PATH"
fi

# Insure that the vendor/bin directory is on our PATH as well

if [ "$PATH" == "${PATH/.composer/}" ] ; then
  export PATH="$HOME/.composer/vendor/bin:$PATH"
fi

# Add $HOME/bin and $HOME/.composer/vendor/bin permanently to our $PATH
# in our .bashrc
chkbashrc="$(grep 'composer/vendor/bin' "$HOME/.bashrc")"
if [ "X$chkbashrc" = "X" ] ; then
  sed -e '/^ *$/,$ d' "$HOME/.bashrc" > "$HOME/.bashrc-head"
  sed -e '1,/^ *$/ d' "$HOME/.bashrc" > "$HOME/.bashrc-body"
  cp "$HOME/.bashrc-head" "$HOME/.bashrc"
cat <<- __END__ >> "$HOME/.bashrc"
[ "\$PATH" == "\${PATH/\$HOME/}" ] && export PATH="\$HOME/bin:\$PATH"
[ "\$PATH" == "\${PATH/.composer/}" ] && export PATH="\$HOME/.composer/vendor/bin:\$PATH"
__END__
  cat "$HOME/.bashrc-body" >> "$HOME/.bashrc"
  rm "$HOME/.bashrc-head"
  rm "$HOME/.bashrc-body"
  MODIFIED_BASHRC=true
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   D R U S H
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -n "$HAS_DRUSH" ]
then
  DRUSH_VERSION="$(drush version --pipe)"
  echo $DRUSH_VERSION | grep '^8' > /dev/null
  if [ "$?" != "0" ]
  then
    $ERROR "Please upgrade to Drush 8 before running this script." >&2
    exit 1
  else
    $VERBOSEMSG "Drush 8 already installed."
  fi
else
  $MSG "Installing Drush"

  # Install Drush via composer
  composer global require drush/drush:dev-master --prefer-source
  aborterr "Could not install drush via 'composer global require'."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   T E R M I N U S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -z "$HAS_TERMINUS" ]
then
  $MSG "Installing Terminus"

  curl https://github.com/pantheon-systems/cli/releases/download/0.5.5/terminus.phar -L -o $HOME/bin/terminus
  aborterr "Could not download terminus."
  chmod +x $HOME/bin/terminus
else
  $VERBOSEMSG "Terminus already installed."
fi


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  C H E C K   E N V I R O N M E N T
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check to see if the Mysql user and password are correct.

MYSQL_EXTRA_FILE="$HOME/.mysql/mysqlextra"
mkdir -p $(dirname $MYSQL_EXTRA_FILE)

cat << __EOT__ > "$MYSQL_EXTRA_FILE"
#This file was written by the quickstart script
[client]
user="$MYSQL_USER"
password="$MYSQL_PASSWORD"
__EOT__
chmod 700 "$MYSQL_EXTRA_FILE"

mysql --defaults-extra-file="$MYSQL_EXTRA_FILE" -e 'select 1;' > /dev/null 2>&1
if [ "$?" != "0" ] ; then
  $ERROR "Mysql credentials incorrect.  Please run again with --user and --pw." >&2
  exit 1
fi

$VERBOSEMSG "Mysql credentials are okay."


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   F I R S T   D R U P A L   S I T E
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Local site creation.
#
# If a Pantheon site was specified, then there is nothing to do here.
#
if [ -z "PANTHEON_SITE" ]
then

  $DEBUGMSG "Local Drupal site creation tbd."

fi


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  M A K E   A   " W O R K I N G   C O P Y "   O F   A   D R U P A L   S I T E
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Pantheon case:
#
# Clone from Pantheon to local.
#
if [ -n "$PANTHEON_SITE" ]
then
  $VERBOSEMSG "Pantheon site is $PANTHEON_SITE"

  # Insure that we are logged in
  WHOAMI=$(terminus auth whoami)
  aborterr "Could not use terminus to determine logged-in status."
  if [ "$WHOAMI" == "You are not logged in." ]
  then
    $ERROR "Please login first with \`terminus auth login\`" >&2
    exit 1
  fi

  # Check our connection mode
  CONNECTION_MODE=$(terminus site connection-mode --site="$PANTHEON_SITE" --env="$PANTHEON_ENV")
  aborterr "Could not use terminus to determine the connection mode of the $PANTHEON_ENV environment of the Pantheon site '$PANTHEON_SITE'."
  $DEBUGMSG "$CONNECTION_MODE"
  echo "$CONNECTION_MODE" | grep -qi git
  if [ "$?" != "0" ]
  then
    if $FORCE
    then
      terminus site connection-mode --site="$PANTHEON_SITE" --env="$PANTHEON_ENV" --set=git
      aborterr "Could not use terminus to set the connection mode of the $PANTHEON_ENV environment of the Pantheon site '$PANTHEON_SITE' to 'git'."
      CONNECTION_MODE=$(terminus site connection-mode --site="$PANTHEON_SITE" --env="$PANTHEON_ENV")
      aborterr "Could not use terminus to determine the connection mode of the $PANTHEON_ENV environment of the Pantheon site '$PANTHEON_SITE'."
    else
      $ERROR "The site $PANTHEON_SITE is not in 'git' mode.  Fix this via 'terminus site connection-mode --site=\"$PANTHEON_SITE\" --env=\"$PANTHEON_ENV\" --set=git', or run again with --force to force-switch to 'git' mode." >&2
      exit 1
    fi
  fi
  $DEBUGMSG "$CONNECTION_MODE"

  # Record some basic information
  UUID=$(terminus site info --site="$PANTHEON_SITE" --field=id)
  aborterr "Could not use terminus to determine the site UUID for the Pantheon site '$PANTHEON_SITE'."
  $DEBUGMSG "UUID is $UUID"

  REPO="ssh://codeserver.dev.$UUID@codeserver.dev.$UUID.drush.in:2222/~/repository.git"
  $DEBUGMSG "Repository is $REPO"

  HASH_SALT="$(base64 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 75 | head -n 1)"
  $DEBUGMSG "Hash_salt is $HASH_SALT"

  LOCAL_ROOT="$BASE_DIR/$PANTHEON_SITE"
  $VERBOSEMSG "Local root is $LOCAL_ROOT"

  LOCAL_SITE_ALIAS="@local.$PANTHEON_SITE"
  $VERBOSEMSG "Local site alias is $LOCAL_SITE_ALIAS"

  LOCAL_SITE_DB="$(echo ${PANTHEON_SITE}localdb | sed -e 's/[^a-zA-Z0-9]//g')"
  $VERBOSEMSG "Local site alias is $LOCAL_SITE_ALIAS"

  PANTHEON_SITE_ALIAS="@pantheon.$PANTHEON_SITE.dev"
  $VERBOSEMSG "Pantheon site alias is $PANTHEON_SITE_ALIAS"

  #
  # Create a local copy of the Pantheon site.
  #
  # The numbers in the comments below correspond to the
  # steps in the manual install instructions in INSTALL.md
  #

  # 1. Make sure that your Pantheon Aliases are up-to-date:

  terminus sites aliases
  aborterr "Could not update Drush aliases using Terminus."

  # 2. Make an alias for your local site.

  # Create the local.aliases.drushrc.php file if it does not already exist.
  mkdir -p "$HOME/.drush"
  aborterr "Could not create ~/.drush folder."
  LOCAL_ALIAS_FILE="$HOME/.drush/local.aliases.drushrc.php"
  if [ ! -f  "$LOCAL_ALIAS_FILE" ]
  then
    echo "<?php" > "$LOCAL_ALIAS_FILE"
  fi

  # Only add an alias if there isn't already an entry for it in the file.
  grep -q "aliases\[\"$PANTHEON_SITE\"\]" "$LOCAL_ALIAS_FILE"
  if [ "$?" != "0" ] ; then

    # Append our alias to the end of our local aliases file.
    cat << __EOF__ >> "$LOCAL_ALIAS_FILE"

\$aliases["$PANTHEON_SITE"] = array(
  'root' => '$LOCAL_ROOT',
  'uri' => 'localhost:$PORT',
);
__EOF__
  fi
  aborterr "Could not create an alias for '$PANTHEON_SITE' in '$LOCAL_ALIAS_FILE'."

  # 3. Check out the code for the Pantheon site.

  # If the site was already cloned, just update it.
  if [ -d "$LOCAL_ROOT" ]
  then
    $MSG "Update code from git repository"
    cd "$LOCAL_ROOT"
    git pull origin master
    aborterr "Could not pull the master branch from the git remote origin."
  else
    $MSG "Clone git repository"
    # Make sure that the parent directory of $LOCAL_ROOT exists
    mkdir -p "$(dirname $LOCAL_ROOT)"
    cd "$(dirname $LOCAL_ROOT)"
    git clone --depth 1 "$REPO" $(basename $LOCAL_ROOT)
    aborterr "Could not clone the git repository '$REPO' to $LOCAL_ROOT"
    cd "$LOCAL_ROOT"
  fi

  # 4. Set up your .gitignore file

  if [ ! -f "$LOCAL_ROOT/.gitignore" ]
  then
    $VERBOSEMSG "Set up .gitignore file"
    cp "$LOCAL_ROOT/example.gitignore" "$LOCAL_ROOT/.gitignore"
    git add "$LOCAL_ROOT/.gitignore"
    git commit -m "Create .gitignore file."
    aborterr "Could not create .gitignore file."
  fi

  # 5. Configure your settings.php file

  grep -q settings.local.php "$LOCAL_ROOT/sites/default/settings.php"
  if [ "$?" != "0" ] ; then
    $VERBOSEMSG "Include settings.local.php from settings.php"
    echo 'if (file_exists(__DIR__ . "/settings.local.php")) { include __DIR__ . "/settings.local.php"; }' >> sites/default/settings.php
    git add sites/default/settings.php
    git commit -m "Add an include local settings line in settings.php"
    aborterr "Could not add an include for settings.local.php to settings.php."
    git push
    aborterr "Could not push modified settings.php back to the central git repository."
  fi

  # 6. Define local configuration values in your settings.local.php file

  if [ ! -f "sites/default/settings.local.php" ]
  then

  $VERBOSEMSG "Create settings.local.php"

cat << __EOF__ > sites/default/settings.local.php
<?php

\$config['system.site']['name'] = 'Local $PANTHEON_SITE site';

\$settings['hash_salt'] = '$HASH_SALT';

\$databases['default']['default'] = array (
  'database' => '${LOCAL_SITE_DB}',
  'username' => '$MYSQL_USER',
  'password' => '$MYSQL_PASSWORD',
  'prefix' => '',
  'host' => 'localhost',
  'port' => '',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
);

\$config_directories = array(
  CONFIG_ACTIVE_DIRECTORY => 'sites/default/files/config/active',
  CONFIG_STAGING_DIRECTORY => 'sites/default/config',
);
__EOF__

    # Create the local database at the same time that we
    # set up the settings.php file.
    $VERBOSEMSG drush $LOCAL_SITE_ALIAS sql-create
    drush $LOCAL_SITE_ALIAS sql-create
    COPY_DATABASE=true

  fi
  aborterr "Could not create settings.local.php file."

  # 7. Copy the database from Pantheon to the local site

  if $COPY_DATABASE
  then
    SQL_DUMP="/tmp/$PANTHEON_SITE.sql"
    SQL_DUMP_GZ="/tmp/$PANTHEON_SITE.sql.gz"
    rm -f "$SQL_DUMP" "$SQL_DUMP_GZ"
    $VERBOSEMSG "drush sql-sync $PANTHEON_SITE_ALIAS $LOCAL_SITE_ALIAS"
    drush sql-sync $PANTHEON_SITE_ALIAS $LOCAL_SITE_ALIAS --target-dump="$SQL_DUMP_GZ"
    aborterr "Drush sql-sync failed."
  fi

  # If we have never used the configuration tools before, then
  # our configuration staging directory will be empty.  In that
  # instance, we should export the current configuration and commit it.
  if [ ! -f "$LOCAL_ROOT/sites/default/config/system.site.yml" ]
  then
    $VERBOSEMSG "config-export $LOCAL_SITE_ALIAS"
    drush $LOCAL_SITE_ALIAS config-export
    aborterr "Could not make an initial export of the configuration directory on '$LOCAL_SITE_ALIAS'."
    (
      cd "$LOCAL_ROOT/sites/default/config"
      git add .
      git commit -m "Initial export of configuration."
      aborterr "Could not commit the configuration directory for '$LOCAL_SITE_ALIAS'."
      git push origin master
      aborterr "Could not push the configuration directory back to the central git repository."
    )
    IMPORT_CONFIGURATION=false
  fi

  # In the case of a --revert, import the configuration again.
  if $IMPORT_CONFIGURATION
  then
    $VERBOSEMSG "config-import $LOCAL_SITE_ALIAS"
    drush $LOCAL_SITE_ALIAS config-import
    aborterr "Could not import the configuration files to $LOCAL_SITE_ALIAS."
  fi

#
# Non-Pantheon (local-to-local) case:
#
# Clone the site created above to another local site.
#
else
  $DEBUGMSG "Local-to-local Drupal site clone tbd."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  F I N I S H   U P
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if $MODIFIED_BASHRC
then
  echo "#"
  echo "# IMPORTANT: To use the components installed by this script,"
  echo "#            type `source ~/.bashrc`"
  echo "#"
  echo "# Repeat in every open terminal."
  echo "#"
fi

if [ -z "$PANTHEON_SITE_ALIAS" ]
then

echo
echo "TIP:  \`drush $LOCAL_SITE_ALIAS rs /\` - run local site w/ php built-in webserver."

else

echo
echo "TIP 1:  \`drush $LOCAL_SITE_ALIAS rs /\` - run local site w/ php built-in webserver."
echo
echo "TIP 2:  \`drush $LOCAL_SITE_ALIAS cm $PANTHEON_SITE_ALIAS --temp\` - merge configuration changes"

fi
